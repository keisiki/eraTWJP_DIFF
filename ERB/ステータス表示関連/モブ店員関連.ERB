;-----------------------------------------------------------
;MOB割当の覚書。20以降は毎日リセット/裸画像有り
;0～10	各地域土産物屋
;11		人里酒屋
;12		索道人里側
;13		鈴奈庵（小鈴不在時）
;14		人里温泉
;15		守谷くじ
;16		索道守谷側
;17		紅魔カジノ
;18		月酒屋
;19		（未使用）
;20		エンカウント販売員
;21～23	エンカウント子分タヌキ
;24		エンカウントのっぺらぼう
;99		モブ男（CSVで割当)
;-----------------------------------------------------------
;モブ子作成の改変
@モブ店員画像作成(店員番号)
{
#DIMS 種族, モブ子店員最大枠 =  "赤巫女", "尼", "人妻", "メイド妖精", "イナバ",
								"妖精", "ゾンビフェアリー", "スク水河童", "白狼天狗", "鬼",
								"玉兎", "人妻", "人妻", "店番", "番台ちゃん", 
								"緑巫女", "河童", "バニー妖精", "玉兎", "",
								"販売員", "茨たぬき", "茨たぬき", "茨たぬき", "のっぺらぼう"
}
#DIM キャラ番号
#DIM GID
#DIMS 生成文字列
#DIMS 合成文字列配列, 50
#DIMS 色合成
#DIMS 指定色
#DIMS 感情 = "通常", "笑顔", "怒り"
#DIMS 着衣
#DIM 合成数
#DIM リソースカウント
#DIM リソース種類
#DIM 店員番号
リソース種類 = 店員番号 > 19 ? 6 # 3
種族:5 = %TEXTR("妖精/化け狸/化け猫/化け狐/茨たぬき")%
;３日に一度販売員が店番に入る
SIF ((GETTIME()/1000000000) % 100) % 3 == 0
	種族:4 = 販売員
CALL SET_MOB_IMAGE_STR(0, 種族:店員番号, 店員番号)
IF 種族:店員番号 == "のっぺらぼう"
	モブ子店員画像文字列:店員番号:3 = %DIC_REMOVE(モブ子店員画像文字列:店員番号:3, "目瞳")%
	モブ子店員画像文字列:店員番号:3 = %DIC_REMOVE(モブ子店員画像文字列:店員番号:3, "表情")%
ENDIF
FOR リソースカウント, 0, リソース種類
	;初期化
	GID = 0
	VARSET LOCAL
	VARSET 合成文字列配列,
	合成数 = 0
	
	;画像合成下地用のダミーを配置する
	CALL 画像合成(GID,"ダミー")
	;別絵モブ店員の処理
	IF GROUPMATCH(種族:店員番号, "販売員", "茨たぬき")
		CALL 別絵モブ子リソース探索(合成文字列配列, 合成数, モブ子店員画像文字列:店員番号:リソースカウント, 1)
		指定色 = %合成文字列配列:49%
		FOR LOCAL, 0, 合成数
			IF 合成文字列配列:LOCAL != ""
				SIF 指定色 != ""
					色合成 = %\@ STRFIND(合成文字列配列:LOCAL, "髪") > -1 ? %指定色% # \@%
				CALL 画像合成(GID, 合成文字列配列:LOCAL, 0, 0, 0, 0, 色合成)
			ENDIF
		NEXT
	ELSE
		;使うリソースの名称を配列に取得する
		CALL モブ子リソース探索(合成文字列配列, 合成数, モブ子店員画像文字列:店員番号:リソースカウント, 1)
		;モブ子画像は高い番号のリソースから先に合成していく必要があるので降順にソートする
		ARRAYSORT 合成文字列配列, BACK, 0, 合成数
		;モブ子用画像を順番に合成していく
		FOR LOCAL, 0, 合成数
			色合成 '= ""
			IF 合成文字列配列:LOCAL != ""
				;色合成確認
				FOR LOCAL:1, 0 ,モブ子素材色種別数
					IF STRFIND(合成文字列配列:LOCAL, @"_%モブ子素材色種別:(LOCAL:1)%_") != -1 && DIC_CONTAINSKEY(モブ子店員画像文字列:店員番号:リソースカウント, @"%モブ子素材色種別:(LOCAL:1)%色")
						色合成 = %DIC_GET(モブ子店員画像文字列:店員番号:リソースカウント, @"%モブ子素材色種別:(LOCAL:1)%色")%
						LOCAL:1 = モブ子素材色種別数
					ENDIF
				NEXT
				CALL 画像合成(GID, 合成文字列配列:LOCAL, 0, 0, 0, 0, 色合成)
			ENDIF
		NEXT
	ENDIF
	;汎用テンプレートで使用できるように名前を統一する
	着衣 = %\@ リソースカウント < 3 ? 服 # 裸 \@%
	LOCAL = リソースカウント % 3
	CALL リソース登録(@"顔絵_%着衣%_%感情:LOCAL%_MOB_{店員番号}", GID)
	モブ子店員GID:店員番号:リソースカウント = GID
NEXT

;=========================================================
;別絵モブ子用の画像文字列を設定
;CID		キャラ番号
;ARGS		別絵使用の種族名	
;NUMBER		CID=0でモブ店員番号、CID=RANDOM_CHARNUMの場合 =1なら風俗嬢
;=========================================================
@別絵モブ子STR設定(CID, ARGS, NUMBER = 0)
#DIM CID
#DIM NUMBER
#DIMS HAIR_TYPE
#DIMS HAIR_COLOR
#DIMS FACE_TYPE
#DIMS BODY_TYPE
#DIM CLOTHES
#DIM JOB
#DIMS ACCESSORY_TYPE1
#DIMS ACCESSORY_TYPE2
#DIMS モブ子パーツ
#DIMS モブ子パーツ_裸
#DIMS 感情_通常
#DIMS 感情_笑顔
#DIMS 感情_怒り
#DIMS LAYER
#DIM WORD_COLOR_TYPE
#DIM BUST
;kaoruセットとの識別子を入れておく
モブ子パーツ = [00:%ARGS%別絵描画]
JOB = (CID && NUMBER)
;モブ店員のバストサイズはランダム
BUST = (CID == RANDOM_CHARANUM) ? TALENT:CID:バストサイズ # (RAND:3) - 1
SELECTCASE ARGS
	CASE "販売員"
		;髪型を設定
		HAIR_TYPE = %TEXTR("長髪/セミロング/姫カット/ほわほわ/ショートカット/短髪/一つ結び/ポニテ/ツインテ/三つ編み/おさげ髪/こけし")%
		;瞳型を設定
		FACE_TYPE = %TEXTR("丸目/垂れ目/釣り目")%
		;バストにあわせて素体決め。イナバは貧乳気味
		BUST = BUST - (RAND:2)
		SELECTCASE BUST
			CASE 0
				BODY_TYPE = 普乳素体
			CASE IS > 0
				BODY_TYPE = 巨乳素体
			CASE IS < 0
				BODY_TYPE = 素体
		ENDSELECT
		;髪の毛と服が被るか判定
		CLOTHES = GROUPMATCH(HAIR_TYPE, "長髪", "セミロング", "姫カット")
		;たまにメガネ/ヘアピン。他に個性ないので裸でもつけっぱ
		ACCESSORY_TYPE1 = %\@ RAND:8 ? # %TEXTR("赤/黒")%メガネ \@%
		ACCESSORY_TYPE2 = %\@ RAND:6 ? # ヘアピン \@%
		
		;可変画像の設定。
		モブ子パーツ += 販売員髪型(HAIR_TYPE)
		モブ子パーツ += 別絵モブ子アクセ(ARGS, ACCESSORY_TYPE1, 9, ACCESSORY_TYPE2, 10)
		モブ子パーツ_裸 = %モブ子パーツ%

		モブ子パーツ += 販売員素体(BODY_TYPE, 0, JOB, CLOTHES)
		モブ子パーツ_裸 += 販売員素体(BODY_TYPE, 1, JOB, CLOTHES)
		感情_通常 = %販売員表情(FACE_TYPE, "通常")%
		感情_笑顔 = %販売員表情(FACE_TYPE, "笑顔")%
		感情_怒り = %販売員表情(FACE_TYPE, "怒り")%
		
		LAYER = 08
	CASE "茨たぬき"
		FACE_TYPE = %TEXTR("イト目/垂れ目/ジト目/まる目/普通目/")%
		HAIR_TYPE = %TEXTR("ロング/ほわほわ/ウェーブ/ショートカット/一つ結び/ポニテ/ツインテ/みつ編みＡ/みつ編みＢ/おさげ髪/こけし/固有Ａ/固有Ｂ/固有Ｃ/固有Ｄ")%
		;色変更はコレジャナイ感出さないように髪色だけ
		LOCALS = 褐色/日焼け/不健康/悪魔/%\@ STRFIND(HAIR_TYPE, "固有") > -1 ? 栗/ # 橙/ \@%
		SIF RAND:5
			モブ子パーツ = [00:%ARGS%別絵描画-色/%TEXTR(LOCALS)%]
		SELECTCASE BUST
			CASE 0
				BODY_TYPE = 普素体
			CASE IS > 0
				BODY_TYPE = 巨素体
			CASE IS < 0
				BODY_TYPE = 貧素体
		ENDSELECT
		;たまに親分と同じメガネ
		ACCESSORY_TYPE1 = %\@ RAND:7 ? # 丸めがね \@%
		ACCESSORY_TYPE2 = 
		
		;可変画像の設定。
		モブ子パーツ = %モブ子パーツ%[11:茨たぬき_たぬき耳][13:茨たぬき_葉っぱ]
		モブ子パーツ += 茨たぬき髪型(HAIR_TYPE)
		モブ子パーツ += 別絵モブ子アクセ(ARGS, ACCESSORY_TYPE1, 12, ACCESSORY_TYPE2, 12)
		モブ子パーツ_裸 = %モブ子パーツ%
		モブ子パーツ += 茨たぬき素体(BODY_TYPE, 0, JOB)
		モブ子パーツ_裸 += 茨たぬき素体(BODY_TYPE, 1, JOB)
		感情_通常 = %茨たぬき表情(FACE_TYPE, "通常")%
		感情_笑顔 = %茨たぬき表情(FACE_TYPE, "笑顔")%
		感情_怒り = %茨たぬき表情(FACE_TYPE, "怒り")%
		
		LAYER = 15
ENDSELECT
;口上色はランダム
WORD_COLOR_TYPE = GET_CN_WORD_COLOR(STR:(RAND:13 + 2050))
IF CID
	CSTR:CID:モブ子画像文字列_服_通常 = %モブ子パーツ%%感情_通常%
	CSTR:CID:モブ子画像文字列_服_笑顔 = %モブ子パーツ%%感情_笑顔%
	CSTR:CID:モブ子画像文字列_服_怒り = %モブ子パーツ%%感情_怒り%
	CSTR:CID:モブ子画像文字列_裸_通常 = %モブ子パーツ_裸%%感情_通常%
	CSTR:CID:モブ子画像文字列_裸_笑顔 = %モブ子パーツ_裸%%感情_笑顔%[%LAYER%:%ARGS%_装飾_照れ]
	CSTR:CID:モブ子画像文字列_裸_怒り = %モブ子パーツ_裸%%感情_怒り%
	CFLAG:CID:1000 = WORD_COLOR_TYPE
ELSE
	モブ子店員画像文字列:NUMBER:0 = %モブ子パーツ%%感情_通常%
	モブ子店員画像文字列:NUMBER:1 = %モブ子パーツ%%感情_笑顔%
	モブ子店員画像文字列:NUMBER:2 = %モブ子パーツ%%感情_怒り%
	モブ子店員画像文字列:NUMBER:3 = %モブ子パーツ_裸%%感情_通常%
	モブ子店員画像文字列:NUMBER:4 = %モブ子パーツ_裸%%感情_笑顔%[%LAYER%:%ARGS%_装飾_照れ]
	モブ子店員画像文字列:NUMBER:5 = %モブ子パーツ_裸%%感情_怒り%
	モブ子店員口上色:NUMBER = WORD_COLOR_TYPE
ENDIF
RETURN RESULT

;=========================================================
;販売員髪型文字列の取得
;=========================================================
@販売員髪型(HAIR_TYPE)
#FUNCTIONS
#DIMS HAIR_TYPE

SELECTCASE HAIR_TYPE
	CASE "長髪"
		LOCALS = [01:販売員_長い][04:販売員_もみあげ]
	CASE "セミロング"
		LOCALS = [01:販売員_ほわほわ][04:販売員_もみあげ]
	CASE "姫カット"
		LOCALS = [01:販売員_ショート][04:販売員_もみあげ]
	CASE "ほわほわ"
		LOCALS = [01:販売員_ほわほわ]
	CASE "ショートカット"
		LOCALS = [01:販売員_ショート][04:販売員_短]
	CASE "短髪"
		LOCALS = [01:販売員_結ぶ]
	CASE "一つ結び"
		LOCALS = [01:販売員_結ぶ][02:販売員_一つ結び][04:販売員_中]
	CASE "三つ編み"
		LOCALS = [01:販売員_結ぶ][02:販売員_三つ編み][04:販売員_中]
	;テール系とウサ耳は相性悪いけど水増しのため入れる
	CASE "ツインテ"
		LOCALS = [01:販売員_結ぶ][02:販売員_ツインテ][04:販売員_中]
	CASE "ポニテ"
		LOCALS = [01:販売員_結ぶ][02:販売員_ポニテ]
	CASE "おさげ髪"
		LOCALS = [01:販売員_結ぶ][02:販売員_おさげ]
	CASE "こけし"
		LOCALS = [01:販売員_切り揃え][04:販売員_中][05:販売員_ぱっつん]
ENDSELECT
SIF HAIR_TYPE != "こけし" 
	LOCALS = %LOCALS%[05:販売員_%TEXTR("短い/ぱっつん/粗め/真ん中寄せ/真ん中分け/斜め/")%]
RETURNF LOCALS

;=========================================================
;	茨たぬき髪型文字列の取得
;=========================================================
@茨たぬき髪型(HAIR_TYPE)
#FUNCTIONS
#DIMS HAIR_TYPE
#DIMS MATCH_TYPE
MATCH_TYPE = [03:茨たぬき_頭%\@ STRFIND(HAIR_TYPE, "固有") > -1 ? %HAIR_TYPE% # 汎用 \@%]
SELECTCASE HAIR_TYPE
	CASE "ロング"
		LOCALS = [02:茨たぬき_髪_ロング]
	CASE "ほわほわ"
		LOCALS = [02:茨たぬき_髪_ほわほわ]
	CASE "ウェーブ"
		LOCALS = [02:茨たぬき_髪_ウェーブ]
	CASE "ショートカット"
		LOCALS = [02:茨たぬき_髪_ショート]
	CASE "一つ結び"
		LOCALS = [02:茨たぬき_髪_結ぶ][01:茨たぬき_髪_一つ結び]
	;テール系とけも耳は相性悪いけど水増しのため入れる
	CASE "ポニテ"
		LOCALS = [02:茨たぬき_髪_結ぶ][01:茨たぬき_髪_ポニテ]
	CASE "ツインテ"
		LOCALS = [02:茨たぬき_髪_結ぶ][01:茨たぬき_髪_ツインテ]
	CASE "みつ編みＡ"
		LOCALS = [02:茨たぬき_髪_結ぶ][01:茨たぬき_髪_みつ編みＡ]
	CASE "みつ編みＢ"
		LOCALS = [01:茨たぬき_髪_みつ編みＢ][02:茨たぬき_髪_結ぶ]
	CASE "おさげ髪"
		LOCALS = [02:茨たぬき_髪_結ぶ][01:茨たぬき_髪_おさげ]
	CASE "こけし"
		LOCALS = [02:茨たぬき_髪_切り揃え][07:茨たぬき_髪_ぱっつん]
		GOTO SKIP
	CASE "固有Ａ", "固有Ｂ", "固有Ｃ", "固有Ｄ"
		LOCALS = [02:茨たぬき_髪_%HAIR_TYPE%]
		GOTO SKIP
	CASEELSE
		LOCALS = [02:茨たぬき_髪_ロング]
ENDSELECT
LOCALS = %LOCALS%[07:茨たぬき_髪_%TEXTR("流す/ぱっつん/でこ出し/真ん中寄せ/真ん中分け/")%]
SIF RAND:3
	LOCALS = %LOCALS%[06:茨たぬき_髪_もみあげ%TEXTR("Ａ/Ｂ/")%]
$SKIP
MATCH_TYPE = %MATCH_TYPE%%LOCALS%
RETURNF MATCH_TYPE

;=========================================================
;	販売員表情文字列の取得
;;=========================================================
@販売員表情(FACE_TYPE, moodStr)
#FUNCTIONS
#DIMS FACE_TYPE
#DIMS moodStr

SELECTCASE FACE_TYPE
	CASE "丸目"
		SELECTCASE moodStr
			CASE "通常"
				RETURNF "[06:販売員_丸通常]"
			CASE "笑顔"
				RETURNF "[06:販売員_丸笑い]"
			CASE "怒り"
				RETURNF "[06:販売員_丸怒り]"
		ENDSELECT
	CASE "釣り目"
		SELECTCASE moodStr
			CASE "通常"
				RETURNF "[06:販売員_釣通常]"
			CASE "笑顔"
				RETURNF "[06:販売員_釣笑い]"
			CASE "怒り"
				RETURNF "[06:販売員_釣怒り]"
		ENDSELECT
	CASE "垂れ目"
		SELECTCASE moodStr
			CASE "通常"
				RETURNF "[06:販売員_垂通常]"
			CASE "笑顔"
				RETURNF "[06:販売員_垂笑い]"
			CASE "怒り"
				RETURNF "[06:販売員_垂怒り]"
		ENDSELECT
ENDSELECT
RETURNF LOCALS

;=========================================================
;	茨たぬき表情文字列の取得
;	口をランダムにしてパターン水増し
;;=========================================================
@茨たぬき表情(FACE_TYPE, moodStr)
#FUNCTIONS
#DIMS FACE_TYPE
#DIMS moodStr

SELECTCASE moodStr
		CASE "通常"
			LOCALS = [09:茨たぬき_%FACE_TYPE%][08:茨たぬき_普通口%TEXTR("Ａ/Ｂ/Ｃ/")%][10:茨たぬき_まろ眉普]
		CASE "怒り"
			LOCALS = [09:茨たぬき_%FACE_TYPE%怒][08:茨たぬき_怒り口%TEXTR("Ａ/Ｂ/Ｃ/")%][10:茨たぬき_まろ眉怒]
		CASE "笑顔"
			SELECTCASE FACE_TYPE
				CASE "イト目"
					LOCALS =  [09:茨たぬき_イト目]
				CASE "垂れ目"
					LOCALS =  [09:茨たぬき_笑い目垂]
				CASE "まる目"
					LOCALS =  [09:茨たぬき_笑い目吊]
				CASEELSE
					LOCALS =  [09:茨たぬき_笑い目普]
			ENDSELECT
			LOCALS = %LOCALS%[08:茨たぬき_笑い口%TEXTR("Ａ/Ｂ/Ｃ/")%][10:茨たぬき_まろ眉笑]
ENDSELECT
RETURNF LOCALS

;=========================================================
;	販売員服装文字列の取得
;	NUDE	=1 裸
;	JOB		=1 風俗嬢
;	CLOTHES	=1 透過処理衣服を着せる 
;=========================================================
@販売員素体(BODY_TYPE, NUDE, JOB, CLOTHES)
#FUNCTIONS
#DIM NUDE
#DIM JOB
#DIM CLOTHES
#DIMS BODY_TYPE
#DIMS SETBODY
IF NUDE
	SETBODY = [03:販売員_%BODY_TYPE%]
ELSEIF JOB
	SETBODY = [03:販売員_%BODY_TYPE%][07:販売員_%BODY_TYPE%%\@ CLOTHES ? もみあげ # \@%バスタオル]
ELSE
	SETBODY = [03:販売員_%\@ CLOTHES ? もみあげ # \@%服素体]
ENDIF
RETURNF SETBODY

;=========================================================
;	茨たぬき服装文字列の取得
;	NUDE	=1 裸
;	JOB		=1 風俗嬢
;=========================================================
@茨たぬき素体(BODY_TYPE, NUDE, JOB)
#FUNCTIONS
#DIM NUDE
#DIM JOB
#DIMS BODY_TYPE
#DIMS SETBODY
IF NUDE
	SETBODY = [04:茨たぬき_%BODY_TYPE%]
ELSEIF JOB
	SETBODY = [04:茨たぬき_%BODY_TYPE%][05:茨たぬき_%BODY_TYPE%タオル]
ELSE
	SETBODY = [04:茨たぬき_%\@ STRFIND(BODY_TYPE, "巨") > -1 ? 巨 # \@%法被]
ENDIF
RETURNF SETBODY

;=========================================================
;	装飾品文字列の取得
;	ここだけ共通化
;=========================================================
@別絵モブ子アクセ(TYPE, ACC_TYPE1, ARG:1, ACC_TYPE2, ARG:2)
#FUNCTIONS
#DIMS TYPE
#DIMS ACC_TYPE1
#DIMS ACC_TYPE2
#DIMS SET_ACC
SET_ACC = 
SIF ACC_TYPE1 != ""
	SET_ACC = [%TOSTR(ARG:1, "D2")%:%TYPE%_%ACC_TYPE1%]
SIF ACC_TYPE2 != ""
	SET_ACC = %SET_ACC%[%TOSTR(ARG:2, "D2")%:%TYPE%_%ACC_TYPE2%]
RETURNF SET_ACC

;*******************************************************************************************************
;別絵モブ子画像生成用関数
;*******************************************************************************************************
;既存モブ子と規格が違うので流用して簡略化した(してない)専用関数で生成
;*******************************************************************************************************
@別絵モブ子画像生成(キャラ番号, 立ち絵種類)
#DIM キャラ番号
#DIM 立ち絵種類
#DIM GID
#DIMS 着衣
#DIMS 感情 = "通常", "笑顔", "怒り"
#DIMS 種類
#DIMS 生成文字列
#DIMS 合成文字列配列, 50
#DIMS 指定色
#DIMS 色合成
#DIM 合成数
#DIM リソースカウント
;モブ子素材CSTR開始位置 = 30	CSTR:モブ子画像文字列_服_通常のCSTR番号
;モブ子素材CFLAG開始位置 = 923	モブ子画像GraphicsIDが入る場所。1枚の画像につき1個のIDらしい。
;モブ子素材リソース数 = 6		CSTR:RANDOM_CHARANUM:モブ子画像文字列_服_通常～裸_怒りまでの６個

;リソース作成
;=====================================
FOR リソースカウント, 0, モブ子素材リソース数
	;初期化
	GID = 0
	VARSET LOCAL
	VARSET 合成文字列配列,
	合成数 = 0

	;画像合成下地用のダミーを配置する。GID(GraphicsID)にREF関数で登録可能な空き番号が入って戻ってくる
	CALL 画像合成(GID,"ダミー")
	
	;使うリソースの名称を配列に取得する。CSTR:RANDOM_CHARANUM:モブ子画像文字列を渡すと
	;REF関数で合成文字列配列にリソース名、合成数にスプライトの数が入って戻ってくる
	CALL 別絵モブ子リソース探索(合成文字列配列, 合成数, CSTR:キャラ番号:(モブ子素材CSTR開始位置 + リソースカウント), 立ち絵種類)
	
	;重ねる順番で配列に入るのでARRAYSORTは不要
	;ARRAYSORT 合成文字列配列, FORWARD, 0, 合成数
	
	;髪色指定を取り出す
	 指定色 = %合成文字列配列:49%
	
	;モブ子用画像を順番に合成していく
	FOR LOCAL, 0, 合成数
		SIF 合成文字列配列:LOCAL == ""
			CONTINUE
		;髪色指定があって合成用リソース名に"髪"が含まれていたらカラーブレンドを指定
		SIF 指定色 != ""
			色合成 = %\@ STRFIND(合成文字列配列:LOCAL, "髪") > -1 ? %指定色% # \@%
		CALL 画像合成(GID, 合成文字列配列:LOCAL, 0, 0, 0, 0, 色合成)
	NEXT
	;合成した画像をリソースに登録する
	CFLAG:キャラ番号:(モブ子素材CFLAG開始位置 + リソースカウント) = GID
	;汎用テンプレートで使用できるように名前を統一する
	LOCAL = リソースカウント % 3
	着衣 = %\@ リソースカウント < 3 ? 服 # 裸\@%
	種類 = %\@ 立ち絵種類 ? 顔絵 # 立ち絵 \@%
	CALL リソース登録(@"%種類%_%着衣%_%感情:LOCAL%_{キャラ番号}", GID)
NEXT
RETURN 1

;*******************************************************************************************************
;別絵モブ子画像リソース探索用関数
;チェックサム的なのを無くしてただ探すだけ
;*******************************************************************************************************
@別絵モブ子リソース探索(合成文字列配列, 合成数, 生成文字列, 立ち絵種類)
#DIMS REF 合成文字列配列,0
#DIM REF 合成数
#DIMS 生成文字列
#DIM 立ち絵種類
#DIMS キー
VARSET LOCAL
VARSET LOCALS
;ゴミ取り
生成文字列 = %REPLACE(生成文字列, "^\"\"", "")%

キー = %TOSTR(LOCAL,"D2")%
;[00:別絵描画]に色指定が含まれるかを見る
IF STRFIND(DIC_GET(生成文字列, キー), "色/") > -1
	SPLIT DIC_GET(生成文字列, キー), "/", LOCALS
	合成文字列配列:49 = %LOCALS:1%
ENDIF

;素材のレイヤー数増やしたらカウントを適宜増やす
FOR LOCAL, 1, 16
	キー = %TOSTR(LOCAL,"D2")%
	SIF !DIC_CONTAINSKEY(生成文字列, キー)
		CONTINUE
	合成文字列配列:(合成数++) = %キー%_%DIC_GET(生成文字列, キー)%%\@ 立ち絵種類 ? _顔 # \@%
NEXT
RETURN 1


;*******************************************************************************************************
;お出かけイベント用モブ子の画像を消す関数
;*******************************************************************************************************
@モブ店員画像リセット
#DIM 番号
FOR 番号, 20, モブ子店員最大枠
	SIF !SPRITECREATED(@"顔絵_服_通常_MOB_{番号}")
		CONTINUE
	SPRITEDISPOSE @"顔絵_服_通常_MOB_{番号}"
	SPRITEDISPOSE @"顔絵_服_笑顔_MOB_{番号}"
	SPRITEDISPOSE @"顔絵_服_怒り_MOB_{番号}"
	SPRITEDISPOSE @"顔絵_裸_通常_MOB_{番号}"
	SPRITEDISPOSE @"顔絵_裸_笑顔_MOB_{番号}"
	SPRITEDISPOSE @"顔絵_裸_怒り_MOB_{番号}"
	FOR COUNT, 0, 6
		GDISPOSE モブ子店員GID:番号:COUNT
		モブ子店員GID:番号:COUNT = 0
		モブ子店員画像文字列:番号:COUNT = 
	NEXT
NEXT
RETURN
