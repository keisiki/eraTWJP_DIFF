;依頼関連の汎用関数を置いておく

;----------------------------------------------------------------------------------------------------
;依頼情報全般の情報取得
;----------------------------------------------------------------------------------------------------
@INT_DATA_IRAI(IRAI_ID, TYPE, CHARA)
#FUNCTION
#DIM  IRAI_ID
#DIMS TYPE
#DIM  CHARA
;一般依頼
SIF IS_COMMON_IRAI(IRAI_ID)
	RETURNF GET_INT(CHARA, "一般依頼", IRAI_ID % 1000, TYPE)
;固有依頼
RETURNF GET_INT(IRAI_ID, "キャラデータ", CHARA, TYPE)

@STR_DATA_IRAI(IRAI_ID, TYPE, CHARA)
#FUNCTIONS
#DIM  IRAI_ID
#DIMS TYPE
#DIM  CHARA
;一般依頼
SIF IS_COMMON_IRAI(IRAI_ID)
	RETURNF GET_STR(CHARA, "一般依頼", IRAI_ID % 1000, TYPE)
;固有依頼
RETURNF GET_STR(IRAI_ID, "キャラデータ", CHARA, TYPE)



;----------------------------------------------------------------------------------------------------
;固有依頼に関するキャラデータ取得
;直接使用するのではなく@INT/STR_DATA_IRAIを使うこと
;----------------------------------------------------------------------------------------------------
@INT_UNIQUE_IRAI(CHARA, TYPE, IRAI_ID)
#FUNCTION
#DIM  CHARA
#DIMS TYPE
#DIM  IRAI_ID
RETURNF GET_INT(IRAI_ID, "キャラデータ", CHARA, TYPE)

@STR_UNIQUE_IRAI(CHARA, TYPE, IRAI_ID)
#FUNCTIONS
#DIM  CHARA
#DIMS TYPE
#DIM  IRAI_ID
RETURNF GET_STR(IRAI_ID, "キャラデータ", CHARA, TYPE)



;----------------------------------------------------------------------------------------------------
;一般依頼情報取得
;直接使用するのではなく@INT/STR_DATA_IRAIを使うこと
;----------------------------------------------------------------------------------------------------
@INT_COMMON_IRAI(CHARA, TYPE, IRAI_ID)
#FUNCTION
#DIM  CHARA
#DIMS TYPE
#DIM  IRAI_ID
RETURNF GET_INT(CHARA, "一般依頼", IRAI_ID, TYPE)

@STR_COMMON_IRAI(CHARA, TYPE, IRAI_ID)
#FUNCTIONS
#DIM  CHARA
#DIMS TYPE
#DIM  IRAI_ID
RETURNF GET_STR(CHARA, "一般依頼", IRAI_ID, TYPE)



;----------------------------------------------------------------------------------------------------
;依頼実行時のコマンド表示用
;----------------------------------------------------------------------------------------------------
@NAME_IRAI_ACT()
#FUNCTIONS
#DIM CHK_SLOT
CHK_SLOT = SEARCH_ACTIVE_IRAI_SLOT()
RETURNF IRAI_SLOT_TO_ACTNAME(CHK_SLOT)

;----------------------------------------------------------------------------------------------------
;依頼実行時のコマンド表示用、SLOT指定でいけるように
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_ACTNAME(CHK_SLOT)
#FUNCTIONS
#DIM CHK_SLOT
RETURNF STR_DATA_IRAI(IRAI_SLOT:CHK_SLOT, "依頼実行コマンド名", IRAI_SLOT_TO_CLIENT(CHK_SLOT))



;----------------------------------------------------------------------------------------------------
;依頼発生時の依頼ID設定用
;----------------------------------------------------------------------------------------------------
@MAKE_IRAI_ID(CHARA, ID)
#FUNCTION
#DIM CHARA
#DIM ID
RETURNF CHARA * 1000 + ID



;----------------------------------------------------------------------------------------------------
;依頼発生時の依頼データ設定用
;----------------------------------------------------------------------------------------------------
@MAKE_IRAI_DATA(SUB_ID, TASK)
#FUNCTION
#DIM  SUB_ID
#DIMS TASK
RETURNF SUB_ID * 1000 + IRAI_TASK_TO_DATA(TASK)



;----------------------------------------------------------------------------------------------------
;依頼が一般依頼か、固有依頼か
;----------------------------------------------------------------------------------------------------
@IS_COMMON_IRAI(IRAI_ID)
#FUNCTION
#DIM IRAI_ID
SIF INRANGE(IRAI_ID % 1000, 1, 99)
	RETURNF 1
RETURNF 0



;----------------------------------------------------------------------------------------------------
;空のスロット探し
;----------------------------------------------------------------------------------------------------
@SEARCH_IRAI_EMPTY()
#FUNCTION
RETURNF SEARCH_IRAI_SLOT(0)



;----------------------------------------------------------------------------------------------------
;何番スロットで依頼IDを受けてるか
;----------------------------------------------------------------------------------------------------
@SEARCH_IRAI_SLOT(IRAI_ID)
#FUNCTION
#DIM IRAI_ID
RETURNF MAX(0, FINDELEMENT(IRAI_SLOT, IRAI_ID, 1))



;----------------------------------------------------------------------------------------------------
;受注中の依頼数
;----------------------------------------------------------------------------------------------------
@COUNT_IRAI_SLOT()
#FUNCTION
LOCAL = SEARCH_IRAI_EMPTY()
SIF !LOCAL
	RETURNF 5
RETURNF LOCAL - 1


;----------------------------------------------------------------------------------------------------
;遭遇用の依頼受託可否判定
;苦し紛れで無理矢理解決
;通常の366コマンドと挙動を変えたくないのでCALL COM_ABLE366
;CALLするのでFUNCTIONにはできない
;TFLAG:100が原因でRESULTが0になっていたのでTFLAGを一時退避して判定させた
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_START
#DIM PREV_TFLAG
PREV_TFLAG = TFLAG:100
TFLAG:100 = 1
CALL COM_ABLE366
TFLAG:100 = PREV_TFLAG
RETURN RESULT



;----------------------------------------------------------------------------------------------------
;依頼ID→依頼者
;----------------------------------------------------------------------------------------------------
@IRAI_ID_TO_CLIENT(IRAI_ID)
#FUNCTION
#DIM IRAI_ID
RETURNF IRAI_ID / 1000



;----------------------------------------------------------------------------------------------------
;依頼SLOT→依頼者
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_CLIENT(CHK_SLOT)
#FUNCTION
#DIM CHK_SLOT
RETURNF IRAI_ID_TO_CLIENT(IRAI_SLOT:CHK_SLOT)



;----------------------------------------------------------------------------------------------------
;依頼SLOT→要求物品
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_ITEM(CHK_SLOT)
#FUNCTION
#DIM IRAI_ID
#DIM CHK_SLOT
SIF IRAI_SLOT_TO_TASKNAME(CHK_SLOT) == "調達"
	RETURNF IRAI_DATA:CHK_SLOT / 1000



;----------------------------------------------------------------------------------------------------
;依頼SLOT→要求人物
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_PERSON(CHK_SLOT)
#FUNCTION
#DIM CHK_SLOT
SIF GROUPMATCH(IRAI_SLOT_TO_TASKNAME(CHK_SLOT), "伝令（人物）", "捜索（人物）")
	RETURNF IRAI_DATA:CHK_SLOT / 1000



;----------------------------------------------------------------------------------------------------
;依頼SLOT→目的地
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_PLACE(CHK_SLOT)
#FUNCTION
#DIM CHK_SLOT
SIF GROUPMATCH(IRAI_SLOT_TO_TASKNAME(CHK_SLOT), "伝令（場所）", "捜索（場所）")
	RETURNF IRAI_DATA:CHK_SLOT / 1000



;----------------------------------------------------------------------------------------------------
;あるキャラが依頼で連れ出せるかどうか
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_CHARA_GO_TOGATHER(CHARA)
#FUNCTION
#DIM CHARA
#DIM IRAI_NUM
#DIM CHK_SLOT
IRAI_NUM = COUNT_IRAI_SLOT()
FOR CHK_SLOT, 1, IRAI_NUM + 1
	SIF CAN_IRAI_SLOT_GO_TOGATHER(CHARA, CHK_SLOT)
		RETURNF 1
NEXT
RETURNF 0


;----------------------------------------------------------------------------------------------------
;あるキャラが依頼で連れ出せるかどうか
;個々の依頼スロットの判定
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_SLOT_GO_TOGATHER(CHARA, CHK_SLOT)
#FUNCTION
#DIM CHARA
#DIM CHK_SLOT
#DIM CLIENT_ID
CLIENT_ID = IRAI_SLOT_TO_CLIENT(CHK_SLOT)
SIF IRAI_CHARA_TO_PROGRESS(CLIENT_ID) != "依頼中"
	RETURNF 0
SIF CHARA == CLIENT_ID && INT_DATA_IRAI(IRAI_SLOT:CHK_SLOT, "依頼人連れ出し可能", CLIENT_ID)
	RETURNF 1
SIF CHARA == INT_DATA_IRAI(IRAI_SLOT:CHK_SLOT, "依頼連れ出し対象", CLIENT_ID)
	RETURNF 1
RETURNF 0



;----------------------------------------------------------------------------------------------------
;[697]部屋を訪ねる　コマンドの機能拡張
;----------------------------------------------------------------------------------------------------
;CHARAがCHK_SLOTの依頼者として報告対象になるか
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_VISIT_HOME_CLIENT(CHARA, CHK_SLOT)
#FUNCTION
#DIM CHARA
#DIM CHK_SLOT
#DIM CLIENT_ID
CLIENT_ID = IRAI_SLOT_TO_CLIENT(CHK_SLOT)
SIF CHARA != CLIENT_ID
	RETURNF 0
SIF !GROUPMATCH(IRAI_CHARA_TO_PROGRESS(CLIENT_ID), "依頼達成", "期限切れ", "報告忘れ", "依頼失敗")
	RETURNF 0
RETURNF 1

;----------------------------------------------------------------------------------------------------
;CHARAがCHK_SLOTの対象者として実行対象になるか
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_VISIT_HOME_PERSON(CHARA, CHK_SLOT)
#FUNCTION
#DIM CHARA
#DIM CHK_SLOT
SIF !CAN_IRAI_SLOT_DO(CHK_SLOT)
	RETURNF 0
SIF IRAI_SLOT_TO_PERSON(CHK_SLOT) != CHARA
	RETURNF 0
RETURNF 1



;----------------------------------------------------------------------------------------------------
;現在実行可能な依頼スロットを返す
;----------------------------------------------------------------------------------------------------
@SEARCH_ACTIVE_IRAI_SLOT()
#FUNCTION
#DIM IRAI_NUM
#DIM CHK_SLOT
#DIM CLIENT_ID
IRAI_NUM = COUNT_IRAI_SLOT()
FOR CHK_SLOT, 1, IRAI_NUM + 1
	SIF CAN_IRAI_SLOT_DO(CHK_SLOT)
		RETURNF CHK_SLOT
NEXT



;----------------------------------------------------------------------------------------------------
;各依頼スロットの実行可否判定
;----------------------------------------------------------------------------------------------------
@CAN_IRAI_SLOT_DO(CHK_SLOT)
#FUNCTION
#DIM CHK_SLOT
#DIM CLIENT_ID
CLIENT_ID = IRAI_SLOT_TO_CLIENT(CHK_SLOT)
SIF IRAI_CHARA_TO_PROGRESS(CLIENT_ID) != "依頼中"
	RETURNF 0
SELECTCASE IRAI_SLOT_TO_TASKNAME(CHK_SLOT)
CASE "作業"
	SIF !TARGET
		RETURNF 0
	SIF TARGET != CLIENT_ID
		RETURNF 0
	SIF SHIRAHU(TARGET) != 1
		RETURNF 0
CASE "伝令（人物）", "捜索（人物）"
	SIF !TARGET
		RETURNF 0
	SIF TARGET != IRAI_SLOT_TO_PERSON(CHK_SLOT)
		RETURNF 0
	;時間停止/睡眠/添い寝/うふふ中は不可
	SIF SHIRAHU(TARGET) != 1
		RETURNF 0
CASE "伝令（場所）", "捜索（場所）"
	;場所一致
	SIF CFLAG:MASTER:現在位置 != GET_MAP_REPLACEMENT(IRAI_SLOT_TO_PLACE(CHK_SLOT))
		RETURNF 0
CASE "調達"
	SIF !TARGET
		RETURNF 0
	SIF TARGET != CLIENT_ID
		RETURNF 0
	SIF SHIRAHU(TARGET) != 1
		RETURNF 0
	SIF ITEM:IRAI_SLOT_TO_ITEM(CHK_SLOT) < IRAI_SUB:CHK_SLOT
		RETURNF 0
ENDSELECT
SIF !INT_DATA_IRAI(IRAI_SLOT:CHK_SLOT, "依頼実行可能条件", CLIENT_ID)
	RETURNF 0
RETURNF 1



;----------------------------------------------------------------------------------------------------
;依頼結果の定義（そのままRETURNだと成否との対応がわからないので）
;----------------------------------------------------------------------------------------------------
@IRAI_CONST_RESULT(TYPE)
#FUNCTION
#DIMS TYPE
#DIM  CONST 依頼結果_実行して未解決 = 3
#DIM  CONST 依頼結果_実行して失敗   = 2
#DIM  CONST 依頼結果_実行して成功   = 1
#DIM  CONST 依頼結果_キャンセル     = -1
SELECTCASE TYPE
CASE "キャンセル"
	RETURNF 依頼結果_キャンセル
CASE "実行して成功"
	RETURNF 依頼結果_実行して成功
CASE "実行して失敗"
	RETURNF 依頼結果_実行して失敗
CASE "実行して未解決"
	RETURNF 依頼結果_実行して未解決
CASEELSE
	THROW 不正な文字列です%TYPE%
ENDSELECT



;----------------------------------------------------------------------------------------------------
;各キャラの依頼状況文字列
;----------------------------------------------------------------------------------------------------
@IRAI_CHARA_TO_PROGRESS(CHARA)
#FUNCTIONS
#DIM CHARA
SELECTCASE CFLAG:CHARA:依頼状況
CASE -1
	RETURNF "依頼発生直後"
CASE 1
	RETURNF "依頼未受託"
CASE 2
	RETURNF "依頼中"
CASE 3
	RETURNF "依頼達成"
CASE 4
	RETURNF "期限切れ"
CASE 5
	RETURNF "報告忘れ"
CASE 6
	RETURNF "依頼失敗"
CASE 103
	RETURNF "依頼終了（成功）"
CASE 104
	RETURNF "依頼終了（期限切れ）"
CASE 105
	RETURNF "依頼終了（報告忘れ）"
CASE 106
	RETURNF "依頼終了（失敗）"
ENDSELECT



;----------------------------------------------------------------------------------------------------
;依頼SLOT→依頼状況文字列
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_PROGRESS(CHK_SLOT)
#FUNCTIONS
#DIM CHK_SLOT
#DIM CLIENT_ID
CLIENT_ID = IRAI_SLOT_TO_CLIENT(CHK_SLOT)
RETURNF IRAI_CHARA_TO_PROGRESS(CLIENT_ID)



;----------------------------------------------------------------------------------------------------
;文字列各を利用して各キャラの依頼状況を設定
;----------------------------------------------------------------------------------------------------
@SET_IRAI_PROGRESS(CHARA, TYPE)
#DIM  CHARA
#DIMS TYPE
SELECTCASE TYPE
CASE "依頼発生直後"
	CFLAG:CHARA:依頼状況 = -1
CASE "依頼未受託"
	CFLAG:CHARA:依頼状況 = 1
	;#;DEBUGPRINTFORML ＞依頼発生　%CALLNAME:CHARA, 20%　{CFLAG:CHARA:依頼内容, 6}
CASE "依頼中"
	CFLAG:CHARA:依頼状況 = 2
CASE "依頼達成"
	CFLAG:CHARA:依頼状況 = 3
CASE "期限切れ"
	CFLAG:CHARA:依頼状況 = 4
CASE "報告忘れ"
	CFLAG:CHARA:依頼状況 = 5
CASE "依頼失敗"
	CFLAG:CHARA:依頼状況 = 6
CASE "依頼終了（成功）"
	CFLAG:CHARA:依頼状況 = 103
CASE "依頼終了（期限切れ）"
	CFLAG:CHARA:依頼状況 = 104
CASE "依頼終了（報告忘れ）"
	CFLAG:CHARA:依頼状況 = 105
CASE "依頼終了（失敗）"
	CFLAG:CHARA:依頼状況 = 106
CASE "依頼消滅"
	[IF_DEBUG]
		IF CFLAG:CHARA:依頼状況 == 1
			DEBUGPRINTFORML ＞でばっぐ中につき自然消滅回避　%CALLNAME:CHARA, 20%　{CFLAG:CHARA:依頼内容, 6}
			RETURN
			DEBUGPRINTFORML ＞依頼消滅　%CALLNAME:CHARA, 20%　{CFLAG:CHARA:依頼内容, 6}
		ENDIF
	[ENDIF]
	CFLAG:CHARA:依頼状況 = 0
	CFLAG:CHARA:依頼内容 = 0
CASEELSE
	DEBUGPRINTFORML ＞不明な依頼進捗設定　%CALLNAME:CHARA, 20%　%TYPE%
ENDSELECT



;----------------------------------------------------------------------------------------------------
;依頼SLOT→業種を取得
;----------------------------------------------------------------------------------------------------
@IRAI_SLOT_TO_TASKNAME(CHK_SLOT)
#FUNCTIONS
#DIM CHK_SLOT
SELECTCASE IRAI_DATA:CHK_SLOT % 1000
CASE 0
	THROW 不正な業種{IRAI_DATA:CHK_SLOT}
CASE 1
	RETURNF "作業"
;達成困難な依頼としてオミット
;CASE 2
;	RETURNF "面会"
CASE 3
	RETURNF "調達"
CASE 4
	RETURNF "伝令（人物）"
CASE 5
	RETURNF "伝令（場所）"
CASE 6
	RETURNF "捜索（人物）"
CASE 7
	RETURNF "捜索（場所）"
CASE 99
	RETURNF "その他"
ENDSELECT



;依頼の業種別、文字列→数字変換
@IRAI_TASK_TO_DATA(TASK)
#FUNCTION
#DIMS TASK
SELECTCASE TASK
CASE "作業"
	RETURNF 1
;達成困難な依頼としてオミット
;CASE "面会"
;	RETURNF 2
CASE "調達"
	RETURNF 3
CASE "伝令（人物）"
	RETURNF 4
CASE "伝令（場所）"
	RETURNF 5
CASE "捜索（人物）"
	RETURNF 6
CASE "捜索（場所）"
	RETURNF 7
CASE "その他"
	RETURNF 99
ENDSELECT



;----------------------------------------------------------------------------------------------------
;場所のランダム選抜関数
;落とし物の場所抽選に使ってる
;書き方もうちょっとどうにかなんねぇのか感が自分でもあるがとりあえずで実装
;何が問題って番号直打ちなもんだからマップの仕様が変わるとバグる
;----------------------------------------------------------------------------------------------------
@RAND_PLACE(ARG, TYPE)
#FUNCTION
#DIM  NG_MAP
#DIM  RESULT_MAP
#DIM  RESULT_PLACE
#DIMS TYPE
#DIMS CONST LOCAL_MAPNAME = "博麗神社", "命蓮寺", "人間の里", "霧の湖〜紅魔館", "迷いの竹林", "魔法の森", "三途の川〜冥界", "妖怪の山 (山麓)", "妖怪の山 (山頂)", "地底", "夢の世界〜月"
SELECTCASE TYPE
CASE "LOST_ITEM"
	;ARG = 落とし物をしたキャラの登録番号
	NG_MAP = GET_MAPID(GET_CHARAHOME(ARG))
	DO
		RESULT_MAP = RAND:11
	LOOP RESULT_MAP == NG_MAP
	;無限ループの可能性が0ではないが気にするほどでもないだろう
	;FISHER_YATES_SHAFFLEをやるのはちと大袈裟だしなぁ
	
	SELECTCASE LOCAL_MAPNAME:RESULT_MAP
	CASE "博麗神社"
		SELECTCASE RAND:11
		CASE 0
		;1,鳥居
			RESULT_PLACE = 1
		CASE 1
		;2,境内
			RESULT_PLACE = 2
		CASE 2
		;3,賽銭箱
			RESULT_PLACE = 3
		CASE 3
		;5,手水舎
			RESULT_PLACE = 5
		CASE 4
		;20,本殿の裏
			RESULT_PLACE = 20
		CASE 5
		;21,守矢神社分社
			RESULT_PLACE = 21
		CASE 6
		;22,参道
			RESULT_PLACE = 22
		CASE 7
		;23,温泉・脱衣所
			RESULT_PLACE = 23
		CASE 8
		;24,温泉
			RESULT_PLACE = 24
		CASE 9
		;25,鎮守の森
			RESULT_PLACE = 25
		CASE 10
		;36,夢幻遺跡前
			RESULT_PLACE = 36
		ENDSELECT
	CASE "命蓮寺"
		SELECTCASE RAND:6
		CASE 0
		;8101,山門
			RESULT_PLACE = 101
		CASE 1
		;8102,境内
			RESULT_PLACE = 102
		CASE 2
		;8121,墓地
			RESULT_PLACE = 121
		CASE 3
		;8122,梵鐘堂
			RESULT_PLACE = 122
		CASE 4
		;8123,霊廟大門
			RESULT_PLACE = 123
		CASE 5
		;8124,霊廟広場
			RESULT_PLACE = 124
		ENDSELECT
	CASE "人間の里"
		SELECTCASE RAND:17
		CASE 0
		;8201,人里の門
			RESULT_PLACE = 201
		CASE 1
		;8202,中央広場
			RESULT_PLACE = 202
		CASE 2
		;8203,南通り
			RESULT_PLACE = 203
		CASE 3
		;8204,東通り
			RESULT_PLACE = 204
		CASE 4
		;8205,北通り
			RESULT_PLACE = 205
		CASE 5
		;8206,西通り
			RESULT_PLACE = 206
		CASE 6
		;8207,龍神像
			RESULT_PLACE = 207
		CASE 7
		;8211,酒屋
			RESULT_PLACE = 211
		CASE 8
		;8212,カフェ
			RESULT_PLACE = 212
		CASE 9
		;8213,鈴奈庵
			RESULT_PLACE = 213
		CASE 10
		;8214,長屋前
			RESULT_PLACE = 214
		CASE 11
		;8215,花屋
			RESULT_PLACE = 215
		CASE 12
		;8216,食料品店
			RESULT_PLACE = 216
		CASE 13
		;8217,甘味所
			RESULT_PLACE = 217
		CASE 14
		;8218,小料理屋
			RESULT_PLACE = 218
		CASE 15
		;8219,集会所
			RESULT_PLACE = 219
		CASE 16
		;8222,寺子屋
			RESULT_PLACE = 222
		ENDSELECT
	CASE "霧の湖〜紅魔館"
		SELECTCASE RAND:6
		CASE 0
		;8301,正門
			RESULT_PLACE = 301
		CASE 1
		;8302,庭
			RESULT_PLACE = 302
		CASE 2
		;8306,裏庭
			RESULT_PLACE = 306
		CASE 3
		;8309,広間
			RESULT_PLACE = 309
		CASE 4
		;8334,廃洋館・入り口
			RESULT_PLACE = 334
		CASE 5
		;8343,湖畔
			RESULT_PLACE = 343
		ENDSELECT
	CASE "迷いの竹林"
		SELECTCASE RAND:8
		CASE 0
		;8401,永遠亭入口
			RESULT_PLACE = 401
		CASE 1
		;8402,永遠亭玄関
			RESULT_PLACE = 402
		CASE 2
		;8403,待合室
			RESULT_PLACE = 403
		CASE 3
		;8433,斜角の竹林
			RESULT_PLACE = 433
		CASE 4
		;8434,迷いの小道
			RESULT_PLACE = 434
		CASE 5
		;8436,無明の丘
			RESULT_PLACE = 436
		CASE 6
		;8438,太陽の畑
			RESULT_PLACE = 438
		CASE 7
		;8447,竹林入口
			RESULT_PLACE = 447
		ENDSELECT
	CASE "魔法の森"
		SELECTCASE RAND:11
		CASE 0
		;8501,魔法の森入り口
			RESULT_PLACE = 501
		CASE 1
		;8502,香霖堂
			RESULT_PLACE = 502
		CASE 2
		;8503,分かれ道
			RESULT_PLACE = 503
		CASE 3
		;8506,無縁塚
			RESULT_PLACE = 506
		CASE 4
		;8507,キノコ群生地
			RESULT_PLACE = 507
		CASE 5
		;8508,魔法の広場
			RESULT_PLACE = 508
		CASE 6
		;8509,再思の道
			RESULT_PLACE = 509
		CASE 7
		;8510,霧雨魔法店
			RESULT_PLACE = 510
		CASE 8
		;8520,人形の館前
			RESULT_PLACE = 520
		CASE 9
		;8534,ふわふわエレン魔法の店
			RESULT_PLACE = 534
		CASE 10
		;8540,古木の大樹
			RESULT_PLACE = 540
		ENDSELECT
	CASE "三途の川〜冥界"
		SELECTCASE RAND:6
		CASE 0
		;6061,中有の道
			RESULT_PLACE = 610
		CASE 1
		;6062,三途の川
			RESULT_PLACE = 620
		CASE 2
		;6063,マヨヒガ
			RESULT_PLACE = 630
		CASE 3
		;6067,彼岸
			RESULT_PLACE = 670
		CASE 4
		;6068,白玉楼庭
			RESULT_PLACE = 680
		CASE 5
		;6069,白玉楼
			RESULT_PLACE = 690
		ENDSELECT
	CASE "妖怪の山 (山麓)"
		SELECTCASE RAND:8
		CASE 0
		;8701,樹海道入り口
			RESULT_PLACE = 701
		CASE 1
		;8702,山道・沢へ続く道
			RESULT_PLACE = 702
		CASE 2
		;8703,玄武の沢
			RESULT_PLACE = 703
		CASE 3
		;8705,山道・中腹
			RESULT_PLACE = 705
		CASE 4
		;8707,山道・分岐点
			RESULT_PLACE = 707
		CASE 5
		;8708,大蝦蟇の池
			RESULT_PLACE = 708
		CASE 6
		;8711,休憩所
			RESULT_PLACE = 711
		CASE 7
		;8732,山頂への道
			RESULT_PLACE = 732
		ENDSELECT
	CASE "妖怪の山 (山頂)"
		SELECTCASE RAND:12
		CASE 0
		;8801,山頂入り口
			RESULT_PLACE = 801
		CASE 1
		;8802,橋
			RESULT_PLACE = 802
		CASE 2
		;8803,索道駅
			RESULT_PLACE = 803
		CASE 3
		;8804,守矢神社鳥居
			RESULT_PLACE = 804
		CASE 4
		;8805,頂上
			RESULT_PLACE = 805
		CASE 5
		;8806,滝の裏
			RESULT_PLACE = 806
		CASE 6
		;8811,境内
			RESULT_PLACE = 811
		CASE 7
		;8814,湖畔
			RESULT_PLACE = 814
		CASE 8
		;8830,玄雲海
			RESULT_PLACE = 830
		CASE 9
		;8831,比那名居邸前
			RESULT_PLACE = 831
		CASE 10
		;8832,有頂天街
			RESULT_PLACE = 832
		CASE 11
		;8833,桃園
			RESULT_PLACE = 833
		ENDSELECT
	CASE "地底"
		SELECTCASE RAND:11
		CASE 0
		;8901,地霊殿前
			RESULT_PLACE = 901
		CASE 1
		;8902,エントランス
			RESULT_PLACE = 902
		CASE 2
		;8926,中庭
			RESULT_PLACE = 926
		CASE 3
		;8931,大通り
			RESULT_PLACE = 931
		CASE 4
		;8932,裏通り
			RESULT_PLACE = 932
		CASE 5
		;8933,酒場
			RESULT_PLACE = 933
		CASE 6
		;8939,路地裏
			RESULT_PLACE = 939
		CASE 7
		;8944,通り
			RESULT_PLACE = 944
		CASE 8
		;8945,川岸
			RESULT_PLACE = 945
		CASE 9
		;8946,橋
			RESULT_PLACE = 946
		CASE 10
		;8948,縦穴の底
			RESULT_PLACE = 948
		ENDSELECT
	CASE "夢の世界〜月"
		SELECTCASE RAND:5
		CASE 0
		;6101,槐安通路
			RESULT_PLACE = 1010
		CASE 1
		;6105,月の都
			RESULT_PLACE = 1050
		CASE 2
		;6107,玉兎の街
			RESULT_PLACE = 1070
		CASE 3
		;6108,桃林〜砂浜
			RESULT_PLACE = 1080
		CASE 4
		;6109,静かの海
			RESULT_PLACE = 1090
		ENDSELECT
	CASEELSE
		THROW 存在しないMAP{RESULT_MAP}
	ENDSELECT
ENDSELECT
SIF !RESULT_PLACE
	THROW 存在しないPLACE{RESULT_PLACE}
RETURNF RESULT_PLACE





;----------------------------------------------------------------------------------------------------
;文通可否関数
;なりきりあなたは考慮外
;----------------------------------------------------------------------------------------------------
;文通相手が一人でも登録されていればTRUE
;----------------------------------------------------------------------------------------------------
@IS_LETTER_CHARA(CHARA)
#FUNCTION
#DIM CHARA
RETURNF STOCK_LETTER_TO("IS_LETTER_CHARA", CHARA)

;----------------------------------------------------------------------------------------------------
;登録上で2キャラが文通可能であるならTRUE
;----------------------------------------------------------------------------------------------------
@IS_PEN_FRIEND(CHARA_A, CHARA_B)
#FUNCTION
#DIM CHARA_A
#DIM CHARA_B
RETURNF STOCK_LETTER_TO("IS_PEN_FRIEND", CHARA_A, CHARA_B)

;----------------------------------------------------------------------------------------------------
;文通相手の抽選
;CAN_MEETも考慮する
;宛先登録とCAN_MEETを見た上でCHARAが手紙を出せる相手がいないなら0
;相手がいるならランダムな相手を取得
;依頼発生時と受託時で出禁設定を変更したりするとバグる
;そこら辺は限界である
;----------------------------------------------------------------------------------------------------
@WHO_LETTER_TO(CHARA)
#FUNCTION
#DIM CHARA
RETURNF STOCK_LETTER_TO("WHO_LETTER_TO", CHARA)



;----------------------------------------------------------------------------------------------------
;文通宛先設定関数
;キャラ知識が全然無いのであまり出来はよろしくない
;直接あったことないんです＞＜くらいの関係でも文通なら不自然にはならん、かも？
;これは一方的なものではなく、差出人設定すれば相手から手紙が返される可能性が出ます
;番号の若い順に登録してるので後のキャラほど設定は少なくて済むはず
;
;以下、この奇怪なコードに至った経緯
;処理の効率化等はまるっきり考慮してないです
;
;・CHARA_AからCHARA_Bの登録とCHARA_Bからの登録を何度もやるのが面倒くさいので双方が同時に登録されるようにしたい
;・HOGE:CHARA:Xの多次元配列で管理する案
;→多次元配列にFINDELEMENTが使えないので重複を弾く検索処理が面倒くさい、FOR-NEXTは論外（コードが長くなる的な意味で）
;・各キャラの宛先配列の保存用関数を別個に用意して各々のプライベート変数で管理、登録と参照は別関数から行う案
;→配列を管理したいがためだけに関数100個も作ってられねぇ
;・文字列に突っ込んで無理矢理解決することにした
;----------------------------------------------------------------------------------------------------
@SETUP_ALL_LETTERS
#DIM LETTER_TO, キャラクタ数上限
#DIM CNT_CHARA
SIF LOCAL
	RETURN
;配列の要素0が手紙の差出人、その他の要素が受取人
;使用する要素数を指定して渡す
;霊夢
LETTER_TO = 1, 11, 14, 15, 16, 17, 23, 25, 26, 31, 34, 43, 49, 52, 55, 56, 67, 68, 70, 80
CNT_CHARA = 15
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;魅魔
LETTER_TO = 4, 9, 11, 17, 26, 102
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;サニー, ルナ, スター
LETTER_TO = 5, 11, 13, 14, 111
CNT_CHARA = 4
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
LETTER_TO = 6, 11, 13, 14, 111
CNT_CHARA = 4
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
LETTER_TO = 7, 11, 13, 14, 111
CNT_CHARA = 4
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;萃香
LETTER_TO = 10, 26, 29, 34, 35, 64
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;魔理沙
LETTER_TO = 11, 13, 14, 15, 17, 23, 25, 29, 31, 50, 52, 67, 68
CNT_CHARA = 12
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;大妖精
LETTER_TO = 13, 18, 19
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;咲夜
LETTER_TO = 15, 17, 23, 25, 41, 51
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;レミリア
;適当に大物感を
LETTER_TO = 16, 26, 80
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;アリス
;TWでは人里公演やってるのでプリリバと多少は交流があっても
;三月精と面識あるんだっけ？
LETTER_TO = 17, 20, 21, 22, 54, 75
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;リリカ, メルラン, ルナサ
;音楽、芸能関連特化
LETTER_TO = 20, 28, 88, 94, 95, 96
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
LETTER_TO = 21, 28, 88, 94, 95, 96
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
LETTER_TO = 22, 28, 88, 94, 95, 96
CNT_CHARA = 5
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;妖夢
LETTER_TO = 23, 25, 52
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;橙
;ぜんぜんわからなかったので適当にケモケモしく
LETTER_TO = 24, 36, 63, 65, 67
CNT_CHARA = 4
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;藍
;趣味というよりは職務上のやりとりが多そうな
LETTER_TO = 25, 29
CNT_CHARA = 1
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;紫
LETTER_TO = 26, 32, 33, 34, 35, 43, 49, 55, 56, 62, 64, 66, 67, 69, 70, 72, 80, 98, 99, 102
CNT_CHARA = 19
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;ミスティア
LETTER_TO = 28, 88, 94, 95, 96
CNT_CHARA = 4
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;早苗
LETTER_TO = 31, 43
CNT_CHARA = 1
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;ぬえ
;寺以外との交遊関係は不明だが
;TWでは仕事で紅魔館に出入りするので適当に
LETTER_TO = 41, 58, 59
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;華扇
LETTER_TO = 43, 56
CNT_CHARA = 1
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;鈴仙
LETTER_TO = 52, 98, 99, 100, 107, 108, 112
CNT_CHARA = 6
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;白蓮
LETTER_TO = 55, 56, 67, 80
CNT_CHARA = 3
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;神子
LETTER_TO = 56, 67, 80
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)

;赤蛮奇が本当に面識あんのか、つるんでるのかというのは置いといて
;二次ではよくみるので入れとけ
;影狼
;番号の並びがキレーだなぁ83番は誰だ？キスメか
LETTER_TO = 63, 73, 93
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)
;赤蛮奇
LETTER_TO = 73, 93
CNT_CHARA = 1
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)

;永琳
LETTER_TO = 72, 98, 99
CNT_CHARA = 2
CALL SET_LETTER_TO(LETTER_TO, CNT_CHARA)

LOCAL ++



;----------------------------------------------------------------------------------------------------
;各キャラの宛先登録関数
;----------------------------------------------------------------------------------------------------

@SET_LETTER_TO(ARRAY, ID_LAST)
#DIM REF ARRAY
#DIM     ARRAY_ID
#DIM     ID_LAST
FOR ARRAY_ID, 1, ID_LAST + 1
	CALLF STOCK_LETTER_TO("SET", ARRAY:0, ARRAY:ARRAY_ID)
NEXT



;----------------------------------------------------------------------------------------------------
;文通宛先関数
;----------------------------------------------------------------------------------------------------
@STOCK_LETTER_TO(COMMAND, CHARA_A, CHARA_B)
#FUNCTION
#DIMS COMMAND
#DIMS LETTER_TO, キャラクタ数上限
#DIM  CHARA_A
#DIM  CHARA_B
#DIMS TMP_LETTER, キャラクタ数上限
#DIM  TMP_ID
#DIM  PREV_RESULT;RESULT退避用
#DIM  CNT_CHARA  ;登録されていた宛先の数
SELECTCASE COMMAND
CASE "SET"
;SETはCHARA_AとCHARA_Bの両方が必須、戻り値なし
	IF CHARA_A == CHARA_B || CHARA_A <= 0 || CHARA_B <= 0
		DEBUGPRINTFORML 無効な登録　{CHARA_A}, {CHARA_B}
		RETURNF 0
	ENDIF
	SIF !STRCOUNT(LETTER_TO:CHARA_A, @"{CHARA_B}/")
		LETTER_TO:CHARA_A += @"{CHARA_B}/"
	SIF !STRCOUNT(LETTER_TO:CHARA_B, @"{CHARA_A}/")
		LETTER_TO:CHARA_B += @"{CHARA_A}/"
CASE "IS_LETTER_CHARA"
;文通相手が一人でも存在すればTRUE
	SIF !STRLENS(LETTER_TO:CHARA_A)
		RETURNF 0
	RETURNF 1
CASE "IS_PEN_FRIEND"
;2キャラが文通可能であるならTRUE
	SIF !STRCOUNT(LETTER_TO:CHARA_A, @"{CHARA_B}/")
		RETURNF 0
	RETURNF 1
CASE "WHO_LETTER_TO"
;ランダムな宛先を返す
;CHARA_Aだけ指定、戻り値あり
	;SIF !STRLENS(LETTER_TO:CHARA_A)
	;	RETURNF RAND_PERSON(CHARA_A)
	SIF !STRLENS(LETTER_TO:CHARA_A)
		RETURNF 0
	VARSET TMP_LETTER
	;F関数でRESULTを変えるのは若干危ない
	PREV_RESULT = RESULT
	SPLIT LETTER_TO:CHARA_A, "/", TMP_LETTER
	CNT_CHARA = RESULT
	RESULT = PREV_RESULT
	RETURNF RAND_LETTER_TO(TMP_LETTER, CNT_CHARA)
ENDSELECT



;----------------------------------------------------------------------------------------------------
;ランダム宛先関数
;シャッフルを利用してランダムにキャラを選択する
;DO-LOOP＋RANDだと挙動が怪しくなりそう
;なおかつ、宛先の少ないキャラだと出禁で容易に無限ループに陥るので
;シャッフルアルゴリズムを使用する
;構文がちょいと複雑化した
;----------------------------------------------------------------------------------------------------
@RAND_LETTER_TO(TMP_LETTER, CNT_CHARA)
#FUNCTION
#DIMS REF TMP_LETTER
#DIM  CNT_CHARA
#DIM  LETTER_ID, キャラクタ数上限
#DIM  CHK_ID
#DIM  ELE_SHAFFLE
SIF !LETTER_STOP(TMP_LETTER, 0, CNT_CHARA)
	LETTER_ID:0 = TOINT(TMP_LETTER:0)
SIF !CNT_CHARA
	RETURNF 0
SIF CNT_CHARA == 1
	RETURNF LETTER_ID:0
FOR CHK_ID, 1, CNT_CHARA
	SIF !STRLENS(TMP_LETTER:CHK_ID)
		BREAK
	DEBUGPRINTFORML CHK_ID{CHK_ID}　CNT_CHARA{CNT_CHARA}
	IF LETTER_STOP(TMP_LETTER, CHK_ID, CNT_CHARA)
		SIF CNT_CHARA <= 1
			BREAK
		;要素を削除するのでもう一度同じIDで調査
		CHK_ID --
		CONTINUE
	ELSE
		ELE_SHAFFLE = RAND(0, CHK_ID + 1)
		LETTER_ID:CHK_ID = LETTER_ID:ELE_SHAFFLE
		LETTER_ID:ELE_SHAFFLE = TOINT(TMP_LETTER:CHK_ID)
	ENDIF
NEXT
RETURNF LETTER_ID:0



;----------------------------------------------------------------------------------------------------
;手紙停止関数
;文字列のTMP_LETTERが出現不能の時にその要素を削除する
;削除が起きたら1
;----------------------------------------------------------------------------------------------------
@LETTER_STOP(TMP_LETTER, CHK_ID, CNT_CHARA)
#FUNCTION
#DIMS REF TMP_LETTER
#DIM      CHK_ID
#DIM  REF CNT_CHARA
IF !CAN_MEET(TOINT(TMP_LETTER:CHK_ID))
	ARRAYREMOVE TMP_LETTER, CHK_ID, 1
	CNT_CHARA --
	RETURNF 1
ELSE
	RETURNF 0
ENDIF
